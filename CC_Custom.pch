//
//  CC_Custom.pch
//  PCHDemo
//
//  Created by mac on 2018/1/3.
//  Copyright © 2018年 mac. All rights reserved.
//

#ifndef CC_Custom_pch
#define CC_Custom_pch

#pragma mark --引入常用头文件

#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>

#endif


#pragma mark --常用UI宏
//屏幕宽
#define cc_ScreenWidth    [UIScreen mainScreen].bounds.size.width
//屏幕高
#define cc_ScreenHeight   [UIScreen mainScreen].bounds.size.height
//颜色创建
#define cc_Color(r,b,g,a)   [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]

//UIView相关
#define  cc_ViewWidth(v)                        v.frame.size.width
#define  cc_ViewHeight(v)                       v.frame.size.height
#define  cc_ViewX(v)                            v.frame.origin.x
#define  cc_ViewY(v)                            v.frame.origin.y

//CGRect 相关
#define cc_RectX(f)                            f.origin.x
#define cc_RectY(f)                            f.origin.y
#define cc_RectWidth(f)                        f.size.width
#define cc_RectHeight(f)                       f.size.height
#define cc_RectSetWidth(f, w)                  CGRectMake(RectX(f), RectY(f), w, RectHeight(f))
#define cc_RectSetHeight(f, h)                 CGRectMake(RectX(f), RectY(f), RectWidth(f), h)
#define cc_RectSetX(f, x)                      CGRectMake(x, RectY(f), RectWidth(f), RectHeight(f))
#define cc_RectSetY(f, y)                      CGRectMake(RectX(f), y, RectWidth(f), RectHeight(f))
#define cc_RectSetSize(f, w, h)                CGRectMake(RectX(f), RectY(f), w, h)
#define cc_RectSetOrigin(f, x, y)              CGRectMake(x, y, RectWidth(f), RectHeight(f))




#pragma mark --Log相关宏

//实例被释放
#define cc_Log_Dealloc  NSLog(@"%@ dealloc success",[self class])
//某实例方法被执行(包含哪个文件第几行)
#define cc_Log_Func     NSLog(@"%s executed in File %s on line %d",__func__,__FILE__,__LINE__)

#define DEBUG_LOG 1       //是否开启日志打印

#if DEBUG_LOG
#define cc_Log(...) NSLog(__VA_ARGS__)
#else
#define cc_Log(...)
#endif









#pragma mark --特殊环境常用宏
#define cc_WeakSelf(type)      __weak typeof(type) weak##type = type;
#define cc_StrongSelf(type)    __strong typeof(type) type = weak##type;

#define kApplication            [UIApplication sharedApplication]
#define kKeyWindow              [UIApplication sharedApplication].keyWindow
#define kAppDelegate            [UIApplication sharedApplication].delegate
#define kUserDefaults           [NSUserDefaults standardUserDefaults]
#define kNotificationCenter     [NSNotificationCenter defaultCenter]

//app版本号
#define kAppVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"]
//iOS版本号
#define device_iOS_Ver [[[UIDevice currentDevice]systemVersion]floatValue]
//当前系统语言
#define kCurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])

//沙盒路径
#define kDocumentPath    [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]
#define kTempPath        NSTemporaryDirectory()
#define kCachePath       [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]

//获取时间间隔(必须在同一有效域内)
#define cc_StartTime CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();
#define cc_EndTime  NSLog(@"Time: %f", CFAbsoluteTimeGetCurrent() - start);

//字符串为空
#define kStringIsEmpty(str) ([str isKindOfClass:[NSNull class]] || str == nil || [str length] < 1 ? YES : NO )

//数组是否为空
#define kArrayIsEmpty(array) (array == nil || [array isKindOfClass:[NSNull class]] || array.count == 0)

//字典是否为空
#define kDictIsEmpty(dic) (dic == nil || [dic isKindOfClass:[NSNull class]] || dic.allKeys == 0)

//是否是空对象
#define kObjectIsEmpty(_object) (_object == nil \
|| [_object isKindOfClass:[NSNull class]] \
|| ([_object respondsToSelector:@selector(length)] && [(NSData *)_object length] == 0) \
|| ([_object respondsToSelector:@selector(count)] && [(NSArray *)_object count] == 0))


#pragma mark - GCD 单例声明与实现

#define kGCD_SHAREINSTANCE_HEADER(classname) \
\
+ (instancetype)shared##classname;

#define kGCD_SHAREINSTANCE_CLASS(classname) \
\
static classname *shared##classname = nil; \
\
+(id)allocWithZone:(struct _NSZone *)zone   \
{   \
static dispatch_once_t onceToken;   \
dispatch_once(&onceToken, ^{    \
shared##classname = [super allocWithZone:zone]; \
});     \
return shared##classname;   \
}   \
\
+(instancetype)shared##classname   \
{   \
static dispatch_once_t onceToken;   \
dispatch_once(&onceToken, ^{    \
shared##classname = [[classname alloc] init];   \
});     \
return shared##classname;   \
}   \
\
-(id)copyWithZone:(NSZone *)zone    \
{   \
return shared##classname;   \
}









#endif /* CC_Custom_pch */
